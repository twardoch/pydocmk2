{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"pydocmk2 pydocmk2 uses MkDocs to build Python API documentation. Forked from pydoc-markdown 2.x , pydocmk2 is focused on Python 2.7 support for legacy reasons, and uses a modified version of the original. It also includes a modified version of the Python 2.7 pydoc tool. Installation python2 -m pip install git+https://github.com/twardoch/pydocmk2 Usage pydocmk2 can generate plain Markdown files from Python modules using the pydocmk2 simple command. Specify one or more module names on the command-line. Supports the + syntax to include members of the module (or ++ to include members of the members, etc.) pydocmk2 simple mypackage+ mypackage.mymodule+ docs.md Alternatively, pydocmk2 wraps the MkDocs command-line interface and generates the markdown pages beforehand. Simply use pydocmk2 build to build the documentation, or pydocmk2 serve to serve the documentation on a local HTTP server. The pydocmk2 gh-deploy from MkDocs is also supported. A configuration file pydocmk2.yml is required to use pydocmk2 in this mode. Below is an example configuration. To get started, create docs/ directory and a file pydocmk2.yml inside of it. Copy the configuration below and adjust it to your needs, then run pydocmk2 build from the docs/ directory. site_name: My Documentation # This tells pydocmk2 which pages to generate from which Python modules, # functions and classes. At the first level is the page name, below that # is a tree of Python member names (modules, classes, etc.) that should be # documented. Higher indentation leads to smaller header size. generate: - baz/cool-stuff.md: - foobar.baz: - foobar.baz.CoolClass+ # (+ to include members) - foobar.baz.some_function - baz/more-stuff.md: - foobar.more++ # (++ to include members, and their members) # MkDocs pages configuration. The ` ` operator is sugar added by pydocmk2 # that allows you to use an external Markdown file (eg. your project's README) # in the documentation. The path must be relative to current working directory. # This configuration is not mandatory if you have your own mkdocs.yml config file. pages: - Home: index.md ../README.md - foobar.baz: - Cool Stuff: baz/cool-stuff.md # These options all show off their default values. You don't have to add # them to your configuration if you're fine with the default. docs_dir: sources gens_dir: _build/pydocmk # This will end up as the MkDocs 'docs_dir' site_dir: _build/site theme: readthedocs loader: pydocmk2.loader.PythonLoader preprocessor: pydocmk2.preprocessors.pydocproc.Preprocessor # Whether to output headers as markdown or HTML. Used to workaround # https://github.com/NiklasRosenstein/pydoc-markdown/issues/11. The default is # to generate HTML with unique and meaningful id tags, which can't be done with # markdown. # # Note: if using the simple generator mode, this will default to 'markdown' # instead of 'html'. headers: html # Additional search path for your Python module. If you use pydocmk2 from a # subdirectory of your project (eg. docs/), you may want to add the parent # directory here. additional_search_paths: - .. Syntax Cross-references Symbols in the same namespace may be referenced by using a hash-symbol ( # ) directly followed by the symbols' name, including relative references. Note that using parentheses for function names is encouraged and will be ignored and automatically added when converting docstrings. Examples: #ClassName.member or #mod.function() . For absolute references for modules or members in names that are not available in the current global namespace, #::mod.member must be used (note the two preceeding two double-colons). For long reference names where only some part of the name should be displayed, the syntax #X~some.reference.name can be used, where X is the number of elements to keep. If X is omitted, it will be assumed 1. Example: #~some.reference.name results in only name being displayed. In order to append additional characters that are not included in the actual reference name, another hash-symbol can be used, like #Signal#s . Sections Sections can be generated with the Markdown # Title syntax. It is important to add a whitespace after the hash-symbol ( # ), as otherwise it would represent a cross-reference. Some special sections alter the rendered result of their content, including Arguments (1) Parameters (1) Attributes (1) Members (1) Raises (2) Returns (2) (1): Lines beginning with ident [( type [, ...])]: are treated as argument/parameter or attribute/member declarations. Types listed inside the parenthesis (optional) are cross-linked, if possible. For attribute/member declarations, the identifier is typed in a monospace font. (2): Lines beginning with type [, ...]: are treated as raise/return type declarations and the type names are cross-linked, if possible. Lines following a name's description are considered part of the most recent documentation unless separated by another declaration or an empty line. type placeholders can also be tuples in the form ( type [, ...]) . Code Blocks GitHub-style Markdown code-blocks with language annotations can be used. ```python for i in range(100): ... ``` Changes v2.2.0 (2020-08-07) fork from https://github.com/NiklasRosenstein/pydoc-markdown/tree/2.x to https://github.com/twardoch/pydocmk2 by @twardoch added pydocproc preprocessor based on original pydoc changes to allow documenting modules that are C++ bindings v2.1.3 (2020-03-21) Support arg and argument keywords in reStructuredText processor (contributed by @pastelmind in #104) v2.1.2 (2020-03-07) Fix function signature for classmethods and staticmethods v2.1.1 (2020-03-02) Reimplement get_function_signature() for better compatibility with default values and annotations Prettifying signature with yapf no longer raises a SyntaxError as all default values and annotations are replaced with placeholders String constants no longer get the str built-in docstring v2.1.0 (2020-03-01) Use yaml.safe_load() instead of yaml.load() to silence warning about unsafe operation (#87) Properly loaded docstring for classmethod/staticmethod. getting descriptor's instance instead calling its get method. 'pages' configuration is deprecated in MKDocs 1.0.0. MKDoc dependency bumped to =1.0.0. Pages configuration not required when mkdocs.yml present. Add newline before titles for plaintext visibility Arguments/Returns section is considered ended if an empty line is found Parse references and replace them with markdown links Pretty print function signature Add smart and google preprocessors v2.0.5 (2018-11-15) Now copies all files from the docs_dir (to include images etc.) (see #56) Fix error with delayed imports changing dictionary size during iteration (see #57) Add headers option which can be of value 'html' or 'markdown' (see #55) Default headers option to 'markdown' in simple mode (see #59) v2.0.4 (2018-07-24) Add -c key=value argument for generate and simple command Add filter=[\"docstring\"] option (#43) Fix regex for detecting cross-references (#44) Handle classes that don't define __init__() (PR#51) Add support for reStructuredText Markup (eg. :class:`MyClass` ) (PR#46, #1) Handle @property functions (PR#50) v2.0.3 Fix #41, #36, #31 Merged #39 v2.0.2 Fix #25 -- Text is incorrectly rendered as code Fix #26 -- Broken links for URLs with fragment identifiers No longer transforms titles in a docstring that are indented (eg. to avoid an indented code block with a # comment to be corrupted) v2.0.1 Support additional_search_path key in configuration Render headers as HTML hX tags rather than Markdown tags, so we assign a proper ID to them Fix #21 -- AttributeError: 'module' object has no attribute 'signature' Now requires the six module FIx #22 -- No blank space after header does not render codeblocks v2.0.0 Complete overhaul of pydoc-markdown employing MkDocs and the Markdown module. Copyright 2017-2018 Niklas Rosenstein","title":"home"},{"location":"index.html#pydocmk2","text":"pydocmk2 uses MkDocs to build Python API documentation. Forked from pydoc-markdown 2.x , pydocmk2 is focused on Python 2.7 support for legacy reasons, and uses a modified version of the original. It also includes a modified version of the Python 2.7 pydoc tool.","title":"pydocmk2"},{"location":"index.html#installation","text":"python2 -m pip install git+https://github.com/twardoch/pydocmk2","title":"Installation"},{"location":"index.html#usage","text":"pydocmk2 can generate plain Markdown files from Python modules using the pydocmk2 simple command. Specify one or more module names on the command-line. Supports the + syntax to include members of the module (or ++ to include members of the members, etc.) pydocmk2 simple mypackage+ mypackage.mymodule+ docs.md Alternatively, pydocmk2 wraps the MkDocs command-line interface and generates the markdown pages beforehand. Simply use pydocmk2 build to build the documentation, or pydocmk2 serve to serve the documentation on a local HTTP server. The pydocmk2 gh-deploy from MkDocs is also supported. A configuration file pydocmk2.yml is required to use pydocmk2 in this mode. Below is an example configuration. To get started, create docs/ directory and a file pydocmk2.yml inside of it. Copy the configuration below and adjust it to your needs, then run pydocmk2 build from the docs/ directory. site_name: My Documentation # This tells pydocmk2 which pages to generate from which Python modules, # functions and classes. At the first level is the page name, below that # is a tree of Python member names (modules, classes, etc.) that should be # documented. Higher indentation leads to smaller header size. generate: - baz/cool-stuff.md: - foobar.baz: - foobar.baz.CoolClass+ # (+ to include members) - foobar.baz.some_function - baz/more-stuff.md: - foobar.more++ # (++ to include members, and their members) # MkDocs pages configuration. The ` ` operator is sugar added by pydocmk2 # that allows you to use an external Markdown file (eg. your project's README) # in the documentation. The path must be relative to current working directory. # This configuration is not mandatory if you have your own mkdocs.yml config file. pages: - Home: index.md ../README.md - foobar.baz: - Cool Stuff: baz/cool-stuff.md # These options all show off their default values. You don't have to add # them to your configuration if you're fine with the default. docs_dir: sources gens_dir: _build/pydocmk # This will end up as the MkDocs 'docs_dir' site_dir: _build/site theme: readthedocs loader: pydocmk2.loader.PythonLoader preprocessor: pydocmk2.preprocessors.pydocproc.Preprocessor # Whether to output headers as markdown or HTML. Used to workaround # https://github.com/NiklasRosenstein/pydoc-markdown/issues/11. The default is # to generate HTML with unique and meaningful id tags, which can't be done with # markdown. # # Note: if using the simple generator mode, this will default to 'markdown' # instead of 'html'. headers: html # Additional search path for your Python module. If you use pydocmk2 from a # subdirectory of your project (eg. docs/), you may want to add the parent # directory here. additional_search_paths: - ..","title":"Usage"},{"location":"index.html#syntax","text":"","title":"Syntax"},{"location":"index.html#cross-references","text":"Symbols in the same namespace may be referenced by using a hash-symbol ( # ) directly followed by the symbols' name, including relative references. Note that using parentheses for function names is encouraged and will be ignored and automatically added when converting docstrings. Examples: #ClassName.member or #mod.function() . For absolute references for modules or members in names that are not available in the current global namespace, #::mod.member must be used (note the two preceeding two double-colons). For long reference names where only some part of the name should be displayed, the syntax #X~some.reference.name can be used, where X is the number of elements to keep. If X is omitted, it will be assumed 1. Example: #~some.reference.name results in only name being displayed. In order to append additional characters that are not included in the actual reference name, another hash-symbol can be used, like #Signal#s .","title":"Cross-references"},{"location":"index.html#sections","text":"Sections can be generated with the Markdown # Title syntax. It is important to add a whitespace after the hash-symbol ( # ), as otherwise it would represent a cross-reference. Some special sections alter the rendered result of their content, including Arguments (1) Parameters (1) Attributes (1) Members (1) Raises (2) Returns (2) (1): Lines beginning with ident [( type [, ...])]: are treated as argument/parameter or attribute/member declarations. Types listed inside the parenthesis (optional) are cross-linked, if possible. For attribute/member declarations, the identifier is typed in a monospace font. (2): Lines beginning with type [, ...]: are treated as raise/return type declarations and the type names are cross-linked, if possible. Lines following a name's description are considered part of the most recent documentation unless separated by another declaration or an empty line. type placeholders can also be tuples in the form ( type [, ...]) .","title":"Sections"},{"location":"index.html#code-blocks","text":"GitHub-style Markdown code-blocks with language annotations can be used. ```python for i in range(100): ... ```","title":"Code Blocks"},{"location":"index.html#changes","text":"","title":"Changes"},{"location":"index.html#v220-2020-08-07","text":"fork from https://github.com/NiklasRosenstein/pydoc-markdown/tree/2.x to https://github.com/twardoch/pydocmk2 by @twardoch added pydocproc preprocessor based on original pydoc changes to allow documenting modules that are C++ bindings","title":"v2.2.0 (2020-08-07)"},{"location":"index.html#v213-2020-03-21","text":"Support arg and argument keywords in reStructuredText processor (contributed by @pastelmind in #104)","title":"v2.1.3 (2020-03-21)"},{"location":"index.html#v212-2020-03-07","text":"Fix function signature for classmethods and staticmethods","title":"v2.1.2 (2020-03-07)"},{"location":"index.html#v211-2020-03-02","text":"Reimplement get_function_signature() for better compatibility with default values and annotations Prettifying signature with yapf no longer raises a SyntaxError as all default values and annotations are replaced with placeholders String constants no longer get the str built-in docstring","title":"v2.1.1 (2020-03-02)"},{"location":"index.html#v210-2020-03-01","text":"Use yaml.safe_load() instead of yaml.load() to silence warning about unsafe operation (#87) Properly loaded docstring for classmethod/staticmethod. getting descriptor's instance instead calling its get method. 'pages' configuration is deprecated in MKDocs 1.0.0. MKDoc dependency bumped to =1.0.0. Pages configuration not required when mkdocs.yml present. Add newline before titles for plaintext visibility Arguments/Returns section is considered ended if an empty line is found Parse references and replace them with markdown links Pretty print function signature Add smart and google preprocessors","title":"v2.1.0 (2020-03-01)"},{"location":"index.html#v205-2018-11-15","text":"Now copies all files from the docs_dir (to include images etc.) (see #56) Fix error with delayed imports changing dictionary size during iteration (see #57) Add headers option which can be of value 'html' or 'markdown' (see #55) Default headers option to 'markdown' in simple mode (see #59)","title":"v2.0.5 (2018-11-15)"},{"location":"index.html#v204-2018-07-24","text":"Add -c key=value argument for generate and simple command Add filter=[\"docstring\"] option (#43) Fix regex for detecting cross-references (#44) Handle classes that don't define __init__() (PR#51) Add support for reStructuredText Markup (eg. :class:`MyClass` ) (PR#46, #1) Handle @property functions (PR#50)","title":"v2.0.4 (2018-07-24)"},{"location":"index.html#v203","text":"Fix #41, #36, #31 Merged #39","title":"v2.0.3"},{"location":"index.html#v202","text":"Fix #25 -- Text is incorrectly rendered as code Fix #26 -- Broken links for URLs with fragment identifiers No longer transforms titles in a docstring that are indented (eg. to avoid an indented code block with a # comment to be corrupted)","title":"v2.0.2"},{"location":"index.html#v201","text":"Support additional_search_path key in configuration Render headers as HTML hX tags rather than Markdown tags, so we assign a proper ID to them Fix #21 -- AttributeError: 'module' object has no attribute 'signature' Now requires the six module FIx #22 -- No blank space after header does not render codeblocks","title":"v2.0.1"},{"location":"index.html#v200","text":"Complete overhaul of pydoc-markdown employing MkDocs and the Markdown module. Copyright 2017-2018 Niklas Rosenstein","title":"v2.0.0"},{"location":"pydocmk2.__main__.html","text":"pydocmk2.__main__ pydocmk2 .__main__ /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/ main .py python2 -m pydocmk2 build Modules argparse atexit os shutil signal subprocess sys yaml Functions copy_source_files (config, pages_required =True ) Copies all files from the docs_dir to the gens_dir defined in the config . It also takes the MkDocs pages configuration into account and converts the special INFILE syntax by copying them to the gens_dir as well. default_config (config) log (*args, **kwargs) main () makedirs (path) Create the directory *path* if it does not already exist. new_project () process_pages (data, gens_dir) # Also process all pages to copy files outside of the docs_dir to the gens_dir. read_config () Reads and preprocesses the pydocmk2 configuration file. write_temp_mkdocs_config (inconf) Generates a configuration for MkDocs on-the-fly from the pydocmk2 configuration and makes sure it gets removed when this program exists. read_config pydocmk2.__main__.read_config = read_config () Reads and preprocesses the pydocmk2 configuration file. write_temp_mkdocs_config pydocmk2.__main__.write_temp_mkdocs_config = write_temp_mkdocs_config (inconf) Generates a configuration for MkDocs on-the-fly from the pydocmk2 configuration and makes sure it gets removed when this program exists. makedirs pydocmk2.__main__.makedirs = makedirs (path) Create the directory *path* if it does not already exist. copy_source_files pydocmk2.__main__.copy_source_files = copy_source_files (config, pages_required =True ) Copies all files from the `docs_dir` to the `gens_dir` defined in the *config*. It also takes the MkDocs `pages` configuration into account and converts the special ` < < INFILE` syntax by copying them to the `gens_dir` as well.","title":"__main__"},{"location":"pydocmk2.document.html","text":"pydocmk2.document pydocmk2 .document /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/document.py This module implements the structural representation of an API documentation in separate documents and symbolic names. The final documentation is rendered from this structured representation. Modules os Classes builtin .object Document Index Section class Document ( builtin .object ) Represents a single document that may contain several #Section#s. Every document *must* have a relative URL associated with it. # Attributes index (Index): The index that the document belongs to. url (str): The relative URL of the document. Methods init (self, index, url) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class Index ( builtin .object ) The index manages all documents and sections globally. It keeps track of the symbolic names allocated for the sections to be able to link to them from other sections. # Attributes documents (dict): sections (dict): Methods init (self) new_document (self, filename, url =None ) Create a new document. Arguments filename (str): The filename of the document. Must end with .md . url (str): The relative URL of the document. If omitted, will be automatically deduced from filename (same without the .md suffix). Raises ValueError: If filename does not end with .md . ValueError: If filename is not a relative path. ValueError: If a document with the specified filename already exists. new_section (self, doc, args, *kwargs) Create a new section in the specified document. The arguments for this method match the parameters for the # Section constructor. Raises ValueError: If the section identifier is already used. Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class Section ( builtin .object ) A section represents a part of a #Document. It contains Markdown-formatted content that will be rendered into a file at some point. # Attributes doc (Document): The document that the section belongs to. identifier (str, None): The globally unique identifier of the section. This identifier usually matches the name of the element that the section describes (eg. a class or function) and will be used for cross-referencing. title (str, None): The title of the section. If specified, it will be rendered before `section.content` and the header-size will depend on the `section.depth`. depth (int): The depth of the section, defaults to 1. Currently only affects the header-size that is rendered for the `section.title`. content (str): The Markdown-formatted content of the section. Methods init (self, doc, identifier =None , title =None , depth =1 , content =None , header_type ='html' ) render (self, stream) Render the section into stream . Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) index Returns the #Index that this section is associated with, accessed via section.document . Section pydocmk2.document.Section = class Section ( __builtin__.object ) A section represents a part of a #Document. It contains Markdown-formatted content that will be rendered into a file at some point. # Attributes doc (Document): The document that the section belongs to. identifier (str, None): The globally unique identifier of the section. This identifier usually matches the name of the element that the section describes (eg. a class or function) and will be used for cross-referencing. title (str, None): The title of the section. If specified, it will be rendered before `section.content` and the header-size will depend on the `section.depth`. depth (int): The depth of the section, defaults to 1. Currently only affects the header-size that is rendered for the `section.title`. content (str): The Markdown-formatted content of the section. Methods __init__ (self, doc, identifier =None , title =None , depth =1 , content =None , header_type ='html' ) render (self, stream) Render the section into *stream*. Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) index Returns the #Index that this section is associated with, accessed via `section.document`. index pydocmk2.document.Section.index Returns the #Index that this section is associated with, accessed via `section.document`. render pydocmk2.document.Section.render = render (self, stream) unbound pydocmk2.document.Section method Render the section into *stream*. Document pydocmk2.document.Document = class Document ( __builtin__.object ) Represents a single document that may contain several #Section#s. Every document *must* have a relative URL associated with it. # Attributes index (Index): The index that the document belongs to. url (str): The relative URL of the document. Methods __init__ (self, index, url) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Index pydocmk2.document.Index = class Index ( __builtin__.object ) The index manages all documents and sections globally. It keeps track of the symbolic names allocated for the sections to be able to link to them from other sections. # Attributes documents (dict): sections (dict): Methods __init__ (self) new_document (self, filename, url =None ) Create a new document. # Arguments filename (str): The filename of the document. Must end with `.md`. url (str): The relative URL of the document. If omitted, will be automatically deduced from *filename* (same without the `.md` suffix). # Raises ValueError: If *filename* does not end with `.md`. ValueError: If *filename* is not a relative path. ValueError: If a document with the specified *filename* already exists. new_section (self, doc, *args, **kwargs) Create a new section in the specified document. The arguments for this method match the parameters for the #Section constructor. # Raises ValueError: If the section identifier is already used. Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) new_document pydocmk2.document.Index.new_document = new_document (self, filename, url =None ) unbound pydocmk2.document.Index method Create a new document. # Arguments filename (str): The filename of the document. Must end with `.md`. url (str): The relative URL of the document. If omitted, will be automatically deduced from *filename* (same without the `.md` suffix). # Raises ValueError: If *filename* does not end with `.md`. ValueError: If *filename* is not a relative path. ValueError: If a document with the specified *filename* already exists. new_section pydocmk2.document.Index.new_section = new_section (self, doc, *args, **kwargs) unbound pydocmk2.document.Index method Create a new section in the specified document. The arguments for this method match the parameters for the #Section constructor. # Raises ValueError: If the section identifier is already used.","title":"document"},{"location":"pydocmk2.document.html#arguments","text":"filename (str): The filename of the document. Must end with .md . url (str): The relative URL of the document. If omitted, will be automatically deduced from filename (same without the .md suffix).","title":"Arguments"},{"location":"pydocmk2.document.html#raises","text":"ValueError: If filename does not end with .md . ValueError: If filename is not a relative path. ValueError: If a document with the specified filename already exists. new_section (self, doc, args, *kwargs) Create a new section in the specified document. The arguments for this method match the parameters for the # Section constructor.","title":"Raises"},{"location":"pydocmk2.document.html#raises_1","text":"ValueError: If the section identifier is already used.","title":"Raises"},{"location":"pydocmk2.imp.html","text":"pydocmk2.imp pydocmk2 .imp /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/imp.py This module provides utilities for importing Python objects by name. Modules inspect types Functions dir_object (name, sort_order, need_docstrings =True ) force_lazy_import (name) Import any modules off of \"name\" by iterating a new list rather than a generator so that this library works with lazy imports. import_module (name) Imports a Python module assuming that the whole *name* identifies only a Python module and no symbol inside a Python module. import_object (name) Like # import_object_with_scope () but returns only the object. import_object_with_scope (name) Imports a Python object by an absolute identifier. # Arguments name (str): The name of the Python object to import. # Returns (any, Module): The object and the module that contains it. Note that for plain modules loaded with this function, both elements of the tuple may be the same object. import_module pydocmk2.imp.import_module = import_module (name) Imports a Python module assuming that the whole *name* identifies only a Python module and no symbol inside a Python module. import_object pydocmk2.imp.import_object = import_object (name) Like #import_object_with_scope() but returns only the object. import_object_with_scope pydocmk2.imp.import_object_with_scope = import_object_with_scope (name) Imports a Python object by an absolute identifier. # Arguments name (str): The name of the Python object to import. # Returns (any, Module): The object and the module that contains it. Note that for plain modules loaded with this function, both elements of the tuple may be the same object. force_lazy_import pydocmk2.imp.force_lazy_import = force_lazy_import (name) Import any modules off of \"name\" by iterating a new list rather than a generator so that this library works with lazy imports.","title":"imp"},{"location":"pydocmk2.loader.html","text":"pydocmk2.loader pydocmk2 .loader /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/loader.py This module provides implementations to load documentation information from an identifier as it is specified in the pydocmk.yml:generate configuration key. A loader basically takes care of loading the documentation content for that name, but is not supposed to apply preprocessing. Modules collections inspect types uuid Classes builtin .object Parameter PythonLoader class Parameter ( builtin .object ) Methods init (self, kind, name, annotation =None , default =None ) repr (self) str (self) replace (self, name = object object , annotation = object object , default = object object , kind = object object ) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes KWONLY = 'KWONLY' POS = 'POS' VARARGS_KW = 'VARARGS_KW' VARARGS_POS = 'VARARGS_POS' Value = class 'pydocmk2.loader.Value' Value (value,) class PythonLoader ( builtin .object ) Expects absolute identifiers to import with #import_object_with_scope(). Methods init (self, config) load_section (self, section) Loads the contents of a #Section. The section.identifier is the name of the object that we need to load. Arguments section (Section): The section to load. Fill the section.title and section.content values. Optionally, section.loader_context can be filled with custom arbitrary data to reference at a later point. Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Functions format_parameters_list (parameters) get_docstring (function) get_full_arg_spec (func) get_function_signature (function, owner_class =None , strip_self_param =False , show_module =False , pretty =True ) get_paramaters_from_arg_spec (argspec, strip_self =False ) trim (docstring) PythonLoader pydocmk2.loader.PythonLoader = class PythonLoader ( __builtin__.object ) Expects absolute identifiers to import with #import_object_with_scope(). Methods __init__ (self, config) load_section (self, section) Loads the contents of a #Section. The `section.identifier` is the name of the object that we need to load. # Arguments section (Section): The section to load. Fill the `section.title` and `section.content` values. Optionally, `section.loader_context` can be filled with custom arbitrary data to reference at a later point. Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) load_section pydocmk2.loader.PythonLoader.load_section = load_section (self, section) unbound pydocmk2.loader.PythonLoader method Loads the contents of a #Section. The `section.identifier` is the name of the object that we need to load. # Arguments section (Section): The section to load. Fill the `section.title` and `section.content` values. Optionally, `section.loader_context` can be filled with custom arbitrary data to reference at a later point. Parameter pydocmk2.loader.Parameter = class Parameter ( __builtin__.object ) Methods __init__ (self, kind, name, annotation =None , default =None ) __repr__ (self) __str__ (self) replace (self, name = object object , annotation = object object , default = object object , kind = object object ) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes KWONLY = 'KWONLY' POS = 'POS' VARARGS_KW = 'VARARGS_KW' VARARGS_POS = 'VARARGS_POS' Value = class 'pydocmk2.loader.Value' Value (value,) KWONLY pydocmk2.loader.Parameter.KWONLY = 'KWONLY' POS pydocmk2.loader.Parameter.POS = 'POS' Value pydocmk2.loader.Parameter.Value = class Value ( __builtin__.tuple ) Value(value,) Method resolution order: Value __builtin__.tuple __builtin__.object Methods __getnewargs__ (self) Return self as a plain tuple. Used by copy and pickle. __getstate__ (self) Exclude the OrderedDict from pickling __repr__ (self) Return a nicely formatted representation string _asdict (self) Return a new OrderedDict which maps field names to their values _replace (_self, **kwds) Return a new Value object replacing specified fields with new values Class methods _make (cls, iterable, new = built-in method __new__ of type object , len = built-in function len ) from __builtin__.type Make a new Value object from a sequence or iterable Static methods __new__ (_cls, value) Create new instance of Value(value,) Descriptors __dict__ Return a new OrderedDict which maps field names to their values value Alias for field number 0 Attributes _fields = ('value',) Methods from __builtin__.tuple __add__ (...) x. __add__ (y) < ==> x+y __contains__ (...) x. __contains__ (y) < ==> y in x __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __iter__ (...) x. __iter__ () < ==> iter(x) __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __mul__ (...) x. __mul__ (n) < ==> x*n __ne__ (...) x. __ne__ (y) < ==> x!=y __rmul__ (...) x. __rmul__ (n) < ==> n*x count (...) T. count (value) -> integer -- return number of occurrences of value index (...) T. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. VARARGS_KW pydocmk2.loader.Parameter.VARARGS_KW = 'VARARGS_KW' VARARGS_POS pydocmk2.loader.Parameter.VARARGS_POS = 'VARARGS_POS'","title":"loader"},{"location":"pydocmk2.loader.html#arguments","text":"section (Section): The section to load. Fill the section.title and section.content values. Optionally, section.loader_context can be filled with custom arbitrary data to reference at a later point.","title":"Arguments"},{"location":"pydocmk2.html","text":"pydocmk2 pydocmk2( version 2.2.0) /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/ init .py pymdocmk2 module Package Contents main document imp loader preprocessors (package) Author Adam Twardoch","title":"pydocmk2"},{"location":"pydocmk2.preprocessors.google.html","text":"pydocmk2.preprocessors.google pydocmk2 . preprocessors .google /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/preprocessors/google.py Modules re Classes Preprocessor class Preprocessor This class implements the preprocessor for Google and PEP 257 docstrings. https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html https://www.python.org/dev/peps/pep-0257/ Methods init (self, config =None ) get_section_names (self) preprocess_section (self, section) Preprocessors a given section into it's components. Preprocessor pydocmk2.preprocessors.google.Preprocessor = class Preprocessor This class implements the preprocessor for Google and PEP 257 docstrings. https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html https://www.python.org/dev/peps/pep-0257/ Methods __init__ (self, config =None ) get_section_names (self) preprocess_section (self, section) Preprocessors a given section into it's components. preprocess_section pydocmk2.preprocessors.google.Preprocessor.preprocess_section = preprocess_section (self, section) unbound pydocmk2.preprocessors.google.Preprocessor method Preprocessors a given section into it's components.","title":"google"},{"location":"pydocmk2.preprocessors.html","text":"pydocmk2.preprocessors pydocmk2 .preprocessors /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/preprocessors/ init .py Package Contents google pydocproc rst simple smart","title":"preprocessors"},{"location":"pydocmk2.preprocessors.pydocproc.html","text":"pydocmk2.preprocessors.pydocproc pydocmk2 . preprocessors .pydocproc /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/preprocessors/pydocproc.py pydocproc preprocessor Modules builtin codecs collections inspect jinja2 os pkgutil pydoc re string sys Classes builtin .object MarkdownDoc ( pydoc.HTMLDoc, builtin .object ) MarkdownRepr ( pydoc.TextRepr, builtin .object ) Preprocessor pydoc.HTMLDoc ( pydoc.Doc ) MarkdownDoc ( pydoc.HTMLDoc, builtin .object ) pydoc.TextRepr ( repr.Repr ) MarkdownRepr ( pydoc.TextRepr, builtin .object ) class MarkdownDoc ( pydoc.HTMLDoc , builtin .object ) FIXME: doc* functions need an extra \"level\" parameter so we can the fitting h[1-6] This required overriding the 'document' function, but can only be done once all doc* functions are implemented. Method resolution order: MarkdownDoc pydoc.HTMLDoc pydoc.Doc builtin .object Methods init (self, level_offset =0 , local =False , index_url ='./' ) classlink (self, object, modname) Make a link for a class. docclass (self, object, name =None , mod =None , funcs ={} , classes ={} , ignored) Produce HTML documentation for a class object . docdata (self, object, name =None , mod =None , cl =None ) Produce html documentation for a data descriptor. docmodule (self, object, name =None , mod =None , ignored) Produce HTML5 documentation for a module object . docother (self, object, name =None , mod =None , *ignored) Produce HTML documentation for a data object . docproperty (self, object, name =None , mod =None , cl =None ) Produce html documentation for a property. docroutine (self, object, name =None , mod =None , funcs ={} , classes ={} , methods ={} , cl =None ) Produce HTML documentation for a function or method object . formattree (self, tree, modname, parent =None ) Render in text a class tree as returned by inspect.getclasstree(). formatvalue (self, object) Format an argument default value as text. getdoc (self, object) heading (self, level, content) Create a HTML heading listing (self, items, formatter =None ) markup (self, text, escape =None , funcs ={} , classes ={} , methods ={} ) Mark up some plain text, given a context of symbols to look for. Each context dictionary maps object names to anchor names. i.e. Replaces plaintext URLs with linked versions Also escapes input text modpkglink (self, data) Make a link for a module or package to display in an index. modulelink (self, object) Make a link for a module. preformat (self, text) url (self, name) Create URL for a documentable thing. Mainly intended for subclassing Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes index_url = None level_offset = None local = None Methods from pydoc.HTMLDoc bigsection (self, title, args) Format a section with a big heading. escape (self, text) from pydoc.HTMLRepr grey (self, text) index (self, dir, shadowed =None ) Generate an HTML index for a directory of modules. multicolumn (self, list, format, cols =4 ) Format a list of items into a multi-column list. namelink (self, name, dicts) Make a link for an identifier, given name-to-URL mappings. page (self, title, contents) Format an HTML page. repr (self, object) from pydoc.HTMLRepr section (self, title, fgcol, bgcol, contents, width =6 , prelude ='' , marginalia =None , gap =' nbsp;' ) Format a section with a heading. Methods from pydoc.Doc document (self, object, name =None , args) Generate documentation for an object . fail (self, object, name =None , args) Raise an exception for unimplemented types. getdocloc (self, object, basedir ='/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7' ) Return the location of module docs or None class MarkdownRepr ( pydoc.TextRepr , builtin .object ) Method resolution order: MarkdownRepr pydoc.TextRepr repr.Repr builtin .object Methods repr1 (self, x, level) repr_string (self, x, level) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from pydoc.TextRepr init (self) repr_instance (self, x, level) repr_str = repr_string (self, x, level) Methods from repr.Repr repr (self, x) repr_array (self, x, level) repr_deque (self, x, level) repr_dict (self, x, level) repr_frozenset (self, x, level) repr_list (self, x, level) repr_long (self, x, level) repr_set (self, x, level) repr_tuple (self, x, level) class Preprocessor ( builtin .object ) This class implements the basic preprocessing. Methods init (self, config) preprocess_section (self, section) Preprocess the contents of section . Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Functions clean (text) mainly for cleaning and from Repr s doc (name) clean pydocmk2.preprocessors.pydocproc.clean = clean (text) mainly for cleaning < and > from `Repr`s MarkdownDoc pydocmk2.preprocessors.pydocproc.MarkdownDoc = class MarkdownDoc ( pydoc.HTMLDoc , __builtin__.object ) FIXME: doc* functions need an extra \"level\" parameter so we can the fitting h[1-6] This required overriding the 'document' function, but can only be done once all doc* functions are implemented. Method resolution order: MarkdownDoc pydoc.HTMLDoc pydoc.Doc __builtin__.object Methods __init__ (self, level_offset =0 , local =False , index_url ='./' ) classlink (self, object, modname) Make a link for a class. docclass (self, object, name =None , mod =None , funcs ={} , classes ={} , *ignored) Produce HTML documentation for a class object. docdata (self, object, name =None , mod =None , cl =None ) Produce html documentation for a data descriptor. docmodule (self, object, name =None , mod =None , *ignored) Produce HTML5 documentation for a module object. docother (self, object, name =None , mod =None , *ignored) Produce HTML documentation for a data object. docproperty (self, object, name =None , mod =None , cl =None ) Produce html documentation for a property. docroutine (self, object, name =None , mod =None , funcs ={} , classes ={} , methods ={} , cl =None ) Produce HTML documentation for a function or method object. formattree (self, tree, modname, parent =None ) Render in text a class tree as returned by inspect.getclasstree(). formatvalue (self, object) Format an argument default value as text. getdoc (self, object) heading (self, level, content) Create a HTML heading listing (self, items, formatter =None ) markup (self, text, escape =None , funcs ={} , classes ={} , methods ={} ) Mark up some plain text, given a context of symbols to look for. Each context dictionary maps object names to anchor names. i.e. Replaces plaintext URLs with linked versions Also escapes input text modpkglink (self, data) Make a link for a module or package to display in an index. modulelink (self, object) Make a link for a module. preformat (self, text) url (self, name) Create URL for a documentable thing. Mainly intended for subclassing Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes index_url = None level_offset = None local = None Methods from pydoc.HTMLDoc bigsection (self, title, *args) Format a section with a big heading. escape (self, text) from pydoc.HTMLRepr grey (self, text) index (self, dir, shadowed =None ) Generate an HTML index for a directory of modules. multicolumn (self, list, format, cols =4 ) Format a list of items into a multi-column list. namelink (self, name, *dicts) Make a link for an identifier, given name-to-URL mappings. page (self, title, contents) Format an HTML page. repr (self, object) from pydoc.HTMLRepr section (self, title, fgcol, bgcol, contents, width =6 , prelude ='' , marginalia =None , gap =' nbsp;' ) Format a section with a heading. Methods from pydoc.Doc document (self, object, name =None , *args) Generate documentation for an object. fail (self, object, name =None , *args) Raise an exception for unimplemented types. getdocloc (self, object, basedir ='/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7' ) Return the location of module docs or None heading pydocmk2.preprocessors.pydocproc.MarkdownDoc.heading = heading (self, level, content) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Create a HTML heading url pydocmk2.preprocessors.pydocproc.MarkdownDoc.url = url (self, name) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Create URL for a documentable thing. Mainly intended for subclassing modpkglink pydocmk2.preprocessors.pydocproc.MarkdownDoc.modpkglink = modpkglink (self, data) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Make a link for a module or package to display in an index. modulelink pydocmk2.preprocessors.pydocproc.MarkdownDoc.modulelink = modulelink (self, object) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Make a link for a module. classlink pydocmk2.preprocessors.pydocproc.MarkdownDoc.classlink = classlink (self, object, modname) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Make a link for a class. formattree pydocmk2.preprocessors.pydocproc.MarkdownDoc.formattree = formattree (self, tree, modname, parent =None ) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Render in text a class tree as returned by inspect.getclasstree(). markup pydocmk2.preprocessors.pydocproc.MarkdownDoc.markup = markup (self, text, escape =None , funcs ={} , classes ={} , methods ={} ) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Mark up some plain text, given a context of symbols to look for. Each context dictionary maps object names to anchor names. i.e. Replaces plaintext URLs with linked versions Also escapes input text docmodule pydocmk2.preprocessors.pydocproc.MarkdownDoc.docmodule = docmodule (self, object, name =None , mod =None , *ignored) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Produce HTML5 documentation for a module object. docclass pydocmk2.preprocessors.pydocproc.MarkdownDoc.docclass = docclass (self, object, name =None , mod =None , funcs ={} , classes ={} , *ignored) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Produce HTML documentation for a class object. formatvalue pydocmk2.preprocessors.pydocproc.MarkdownDoc.formatvalue = formatvalue (self, object) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Format an argument default value as text. docroutine pydocmk2.preprocessors.pydocproc.MarkdownDoc.docroutine = docroutine (self, object, name =None , mod =None , funcs ={} , classes ={} , methods ={} , cl =None ) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Produce HTML documentation for a function or method object. docproperty pydocmk2.preprocessors.pydocproc.MarkdownDoc.docproperty = docproperty (self, object, name =None , mod =None , cl =None ) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Produce html documentation for a property. docother pydocmk2.preprocessors.pydocproc.MarkdownDoc.docother = docother (self, object, name =None , mod =None , *ignored) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Produce HTML documentation for a data object. docdata pydocmk2.preprocessors.pydocproc.MarkdownDoc.docdata = docdata (self, object, name =None , mod =None , cl =None ) unbound pydocmk2.preprocessors.pydocproc.MarkdownDoc method Produce html documentation for a data descriptor. Preprocessor pydocmk2.preprocessors.pydocproc.Preprocessor = class Preprocessor ( __builtin__.object ) This class implements the basic preprocessing. Methods __init__ (self, config) preprocess_section (self, section) Preprocess the contents of *section*. Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) preprocess_section pydocmk2.preprocessors.pydocproc.Preprocessor.preprocess_section = preprocess_section (self, section) unbound pydocmk2.preprocessors.pydocproc.Preprocessor method Preprocess the contents of *section*.","title":"pydocproc"},{"location":"pydocmk2.preprocessors.rst.html","text":"pydocmk2.preprocessors.rst pydocmk2 . preprocessors .rst /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/preprocessors/rst.py This module implements preprocessing Markdown-like docstrings and converts it to fully markdown compatible markup. Modules re textwrap Classes builtin .object Preprocessor class Preprocessor ( builtin .object ) This class implements the preprocessor for restructured text. Methods init (self, config =None ) preprocess_section (self, section) Preprocessors a given section into it's components. Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Preprocessor pydocmk2.preprocessors.rst.Preprocessor = class Preprocessor ( __builtin__.object ) This class implements the preprocessor for restructured text. Methods __init__ (self, config =None ) preprocess_section (self, section) Preprocessors a given section into it's components. Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) preprocess_section pydocmk2.preprocessors.rst.Preprocessor.preprocess_section = preprocess_section (self, section) unbound pydocmk2.preprocessors.rst.Preprocessor method Preprocessors a given section into it's components.","title":"rst"},{"location":"pydocmk2.preprocessors.simple.html","text":"pydocmk2.preprocessors.simple pydocmk2 . preprocessors .simple /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/preprocessors/simple.py This module implements preprocessing Markdown-like docstrings and converts it to fully markdown compatible markup. Modules re Classes builtin .object Preprocessor class Preprocessor ( builtin .object ) This class implements the basic preprocessing. Methods init (self, config) preprocess_section (self, section) Preprocess the contents of section . Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Preprocessor pydocmk2.preprocessors.simple.Preprocessor = class Preprocessor ( __builtin__.object ) This class implements the basic preprocessing. Methods __init__ (self, config) preprocess_section (self, section) Preprocess the contents of *section*. Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) preprocess_section pydocmk2.preprocessors.simple.Preprocessor.preprocess_section = preprocess_section (self, section) unbound pydocmk2.preprocessors.simple.Preprocessor method Preprocess the contents of *section*.","title":"simple"},{"location":"pydocmk2.preprocessors.smart.html","text":"pydocmk2.preprocessors.smart pydocmk2 . preprocessors .smart /Users/adam/Developer/vcs/github.twardoch/pub/pydocmk2/pydocmk2/preprocessors/smart.py Classes builtin .object Preprocessor class Preprocessor ( builtin .object ) This class implements the preprocessor for restructured text and google. Methods init (self, config =None ) is_google_format (self, docstring) Check if docstring is written in Google docstring format https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html preprocess_section (self, section) Preprocessors a given section into it's components. Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Preprocessor pydocmk2.preprocessors.smart.Preprocessor = class Preprocessor ( __builtin__.object ) This class implements the preprocessor for restructured text and google. Methods __init__ (self, config =None ) is_google_format (self, docstring) Check if `docstring` is written in Google docstring format https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html preprocess_section (self, section) Preprocessors a given section into it's components. Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) is_google_format pydocmk2.preprocessors.smart.Preprocessor.is_google_format = is_google_format (self, docstring) unbound pydocmk2.preprocessors.smart.Preprocessor method Check if `docstring` is written in Google docstring format https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html preprocess_section pydocmk2.preprocessors.smart.Preprocessor.preprocess_section = preprocess_section (self, section) unbound pydocmk2.preprocessors.smart.Preprocessor method Preprocessors a given section into it's components.","title":"smart"}]}